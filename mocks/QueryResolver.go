// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/G0SU19O2/Go-Twitter/graph"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQueryResolver creates a new instance of MockQueryResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryResolver {
	mock := &MockQueryResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueryResolver is an autogenerated mock type for the QueryResolver type
type MockQueryResolver struct {
	mock.Mock
}

type MockQueryResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryResolver) EXPECT() *MockQueryResolver_Expecter {
	return &MockQueryResolver_Expecter{mock: &_m.Mock}
}

// Me provides a mock function for the type MockQueryResolver
func (_mock *MockQueryResolver) Me(ctx context.Context) (*graph.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Me")
	}

	var r0 *graph.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*graph.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *graph.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryResolver_Me_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Me'
type MockQueryResolver_Me_Call struct {
	*mock.Call
}

// Me is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueryResolver_Expecter) Me(ctx interface{}) *MockQueryResolver_Me_Call {
	return &MockQueryResolver_Me_Call{Call: _e.mock.On("Me", ctx)}
}

func (_c *MockQueryResolver_Me_Call) Run(run func(ctx context.Context)) *MockQueryResolver_Me_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueryResolver_Me_Call) Return(user *graph.User, err error) *MockQueryResolver_Me_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQueryResolver_Me_Call) RunAndReturn(run func(ctx context.Context) (*graph.User, error)) *MockQueryResolver_Me_Call {
	_c.Call.Return(run)
	return _c
}
