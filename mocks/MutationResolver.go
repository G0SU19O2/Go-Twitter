// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/G0SU19O2/Go-Twitter/graph"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMutationResolver creates a new instance of MockMutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMutationResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMutationResolver {
	mock := &MockMutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMutationResolver is an autogenerated mock type for the MutationResolver type
type MockMutationResolver struct {
	mock.Mock
}

type MockMutationResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMutationResolver) EXPECT() *MockMutationResolver_Expecter {
	return &MockMutationResolver_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockMutationResolver
func (_mock *MockMutationResolver) Login(ctx context.Context, input graph.LoginInput) (*graph.AuthResponse, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *graph.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graph.LoginInput) (*graph.AuthResponse, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graph.LoginInput) *graph.AuthResponse); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.AuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graph.LoginInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMutationResolver_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockMutationResolver_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input graph.LoginInput
func (_e *MockMutationResolver_Expecter) Login(ctx interface{}, input interface{}) *MockMutationResolver_Login_Call {
	return &MockMutationResolver_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *MockMutationResolver_Login_Call) Run(run func(ctx context.Context, input graph.LoginInput)) *MockMutationResolver_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graph.LoginInput
		if args[1] != nil {
			arg1 = args[1].(graph.LoginInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMutationResolver_Login_Call) Return(authResponse *graph.AuthResponse, err error) *MockMutationResolver_Login_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockMutationResolver_Login_Call) RunAndReturn(run func(ctx context.Context, input graph.LoginInput) (*graph.AuthResponse, error)) *MockMutationResolver_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockMutationResolver
func (_mock *MockMutationResolver) Register(ctx context.Context, input graph.RegisterInput) (*graph.AuthResponse, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *graph.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graph.RegisterInput) (*graph.AuthResponse, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graph.RegisterInput) *graph.AuthResponse); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.AuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graph.RegisterInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMutationResolver_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockMutationResolver_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - input graph.RegisterInput
func (_e *MockMutationResolver_Expecter) Register(ctx interface{}, input interface{}) *MockMutationResolver_Register_Call {
	return &MockMutationResolver_Register_Call{Call: _e.mock.On("Register", ctx, input)}
}

func (_c *MockMutationResolver_Register_Call) Run(run func(ctx context.Context, input graph.RegisterInput)) *MockMutationResolver_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graph.RegisterInput
		if args[1] != nil {
			arg1 = args[1].(graph.RegisterInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMutationResolver_Register_Call) Return(authResponse *graph.AuthResponse, err error) *MockMutationResolver_Register_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockMutationResolver_Register_Call) RunAndReturn(run func(ctx context.Context, input graph.RegisterInput) (*graph.AuthResponse, error)) *MockMutationResolver_Register_Call {
	_c.Call.Return(run)
	return _c
}
